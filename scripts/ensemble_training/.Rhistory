require(readr)
require(dplyr)
require(UpSetR)
# Load all colocalization results for different methods
coloc = read_delim("/users/mgloud/projects/coloc_comparisons/output/full_comparison/coloc_results.txt", delim="\t")
finemap = read_delim("/users/mgloud/projects/coloc_comparisons/output/full_comparison/finemap_results.txt", delim="\t")
#finemap2 = read_delim("/users/mgloud/projects/coloc_comparisons/output/full_comparison/finemap_c2_results.txt", delim="\t")
baseline = read_delim("/users/mgloud/projects/coloc_comparisons/output/full_comparison/baseline_results.txt", delim="\t")
smr = read_delim("/users/mgloud/projects/coloc_comparisons/output/full_comparison/smr_results.txt", delim="\t")
gsmr = read_delim("/users/mgloud/projects/coloc_comparisons/output/full_comparison/gsmr_results.txt", delim="\t")
twas = read_delim("/users/mgloud/projects/coloc_comparisons/output/full_comparison/twas_results.txt", delim="\t")
rtc = read_delim("/users/mgloud/projects/coloc_comparisons/output/full_comparison/rtc_results.txt", delim="\t")
names(baseline)[6] = "base_gwas_file"
idx = which(!(names(baseline) %in% c("ref_snp", "eqtl_file", "gwas_trait", "feature", "base_gwas_file")))
names(baseline)[idx] = paste0(names(baseline[idx]), "_baseline")
idx = which(!(names(finemap) %in% c("ref_snp", "eqtl_file", "gwas_trait", "feature", "base_gwas_file")))
names(finemap)[idx] = paste0(names(finemap[idx]), "_finemap_c1")
#idx = which(!(names(finemap2) %in% c("ref_snp", "eqtl_file", "gwas_trait", "feature", "base_gwas_file")))
#names(finemap2)[idx] = paste0(names(finemap2[idx]), "_finemap_c2")
idx = which(!(names(coloc) %in% c("ref_snp", "eqtl_file", "gwas_trait", "feature", "base_gwas_file")))
names(coloc)[idx] = paste0(names(coloc[idx]), "_coloc")
idx = which(!(names(smr) %in% c("ref_snp", "eqtl_file", "gwas_trait", "feature", "base_gwas_file")))
names(smr)[idx] = paste0(names(smr[idx]), "_smr")
idx = which(!(names(gsmr) %in% c("ref_snp", "eqtl_file", "gwas_trait", "feature", "base_gwas_file")))
names(gsmr)[idx] = paste0(names(gsmr[idx]), "_gsmr")
idx = which(!(names(twas) %in% c("ref_snp", "eqtl_file", "gwas_trait", "feature", "base_gwas_file")))
names(twas)[idx] = paste0(names(twas[idx]), "_twas")
idx = which(!(names(rtc) %in% c("ref_snp", "eqtl_file", "gwas_trait", "feature", "base_gwas_file")))
names(rtc)[idx] = paste0(names(rtc[idx]), "_rtc")
# Join all results for the same locus into a single row with scores for each method
combo = full_join(baseline, coloc, by=c("ref_snp", "eqtl_file", "gwas_trait", "feature", "base_gwas_file"))
#combo = full_join(combo, finemap2, by=c("ref_snp", "eqtl_file", "gwas_trait", "feature", "base_gwas_file"))
combo = full_join(combo, finemap, by=c("ref_snp", "eqtl_file", "gwas_trait", "feature", "base_gwas_file"))
combo = full_join(combo, smr, by=c("ref_snp", "eqtl_file", "gwas_trait", "feature", "base_gwas_file"))
combo = full_join(combo, gsmr, by=c("ref_snp", "eqtl_file", "gwas_trait", "feature", "base_gwas_file"))
combo = full_join(combo, twas, by=c("ref_snp", "eqtl_file", "gwas_trait", "feature", "base_gwas_file"))
combo = full_join(combo, rtc, by=c("ref_snp", "eqtl_file", "gwas_trait", "feature", "base_gwas_file"))
combo
combo$test_names = paste(combo$ref_snp, combo$eqtl_file, combo$gwas_trait, combo$base_gwas_file, combo$feature, sep="_")
combo$test_names
combo$clpp_finemap_c1
stopifnot(length(combo$test_names) == length(unique(combo$test_names))) # Each test should have a unique ID
upset_matrix = array(-1, dim=c(dim(combo)[1],9))
dimnames(upset_matrix)[[1]] = combo$test_names
dimnames(upset_matrix)[[2]] = c("FINEMAP_c1", "FINEMAP_c2", "COLOC", "Baseline_simple", "Baseline_smart", "SMR_no_HEIDI", "SMR_with_HEIDI", "GSMR", "TWAS")
upset_matrix
upset_matrix.columns
colnames(upset_matrix)
combo$test_names
combo$ranked_finemap_c1 = rank(-combo$clpp_finemap_c1)
combo$ranked_finemap_c2 = rank(-combo$clpp_finemap_c2)
combo$ranked_coloc = rank(-combo$clpp_h4_coloc)
combo$ranked_baseline_simple = rank(-combo$baseline_pval_baseline)
combo$ranked_baseline_smart = rank(-combo$baseline_pval5_baseline)
combo$ranked_smr_no_heidi = rank(-combo$smr_neg_log_pval_smr)
combo$ranked_smr_with_heidi = rank(-combo$smr_heidi_adjusted)
combo$ranked_gsmr_no_heidi = rank(-combo$smr_neg_log_pval_gsmr)
combo$ranked_twas = rank(-combo$twas_log_pval)
rank_threshold = 1000
for (i in 1:dim(upset_matrix)[1])
{
        upset_matrix[i, 1] = (combo[i,]$ranked_finemap_c1 <= rank_threshold)
        upset_matrix[i, 2] = (combo[i,]$ranked_finemap_c2 <= rank_threshold)
        upset_matrix[i, 3] = (combo[i,]$ranked_coloc <= rank_threshold)
        upset_matrix[i, 4] = (combo[i,]$ranked_baseline_simple <= rank_threshold)
        upset_matrix[i, 5] = (combo[i,]$ranked_baseline_smart <= rank_threshold)
        upset_matrix[i, 6] = (combo[i,]$ranked_smr_no_heidi <= rank_threshold)
        upset_matrix[i, 7] = (combo[i,]$ranked_smr_with_heidi <= rank_threshold)
        upset_matrix[i, 8] = (combo[i,]$ranked_gsmr_no_heidi <= rank_threshold)
        upset_matrix[i, 9] = (combo[i,]$ranked_twas <= rank_threshold)
}
upset_matrix[is.na(upset_matrix)] = 0
upset_matrix = upset_matrix[rowSums(upset_matrix) > 0,]
upset_matrix = data.frame(upset_matrix)
#upset_matrix$Names = rownames(upset_matrix)
upset_matrix_names = rownames(upset_matrix)
upset(upset_matrix,
      sets = dimnames(upset_matrix)[[2]],
      order.by="freq", matrix.color="blue", point.size=5,
      sets.bar.color=c("maroon","blue","orange", "green", "red", "violet", "cyan", "forestgreen", "black"))
combo = read.csv("/users/j29tien/colocalization_ML/real_matrix.tsv", sep='\t')
combo
colnames(combo)
combo$COLOC
combo$test_names
combo$test_names = paste(combo$ref_snp, combo$eqtl_file, combo$gwas_trait, combo$base_gwas_file, combo$feature, sep="_")
read.csv("/users/mgloud/projects/coloc_comparisons/jeremy/colocalization_matrix_real_data.tsv", sep='\t')
read.csv("/users/mgloud/projects/coloc_comparisons/jeremy/colocalization_matrix_real_data.tsv", sep='\t').dropna()
na.omit(read.csv("/users/mgloud/projects/coloc_comparisons/jeremy/colocalization_matrix_real_data.tsv", sep='\t'))
na.omit(read.csv("/users/mgloud/projects/coloc_comparisons/jeremy/colocalization_matrix_real_data.tsv", sep='\t'))[c(1:5)]
na.omit(read.csv("/users/mgloud/projects/coloc_comparisons/jeremy/colocalization_matrix_real_data.tsv", sep='\t'))[c(1:6)]
na.omit(read.csv("/users/mgloud/projects/coloc_comparisons/jeremy/colocalization_matrix_real_data.tsv", sep='\t'))[c(0:6)]
na.omit(read.csv("/users/mgloud/projects/coloc_comparisons/jeremy/colocalization_matrix_real_data.tsv", sep='\t'))[c(0:5)]
na.omit(read.csv("/users/mgloud/projects/coloc_comparisons/jeremy/colocalization_matrix_real_data.tsv", sep='\t'))[c(0)]
na.omit(read.csv("/users/mgloud/projects/coloc_comparisons/jeremy/colocalization_matrix_real_data.tsv", sep='\t'))[c(1:5)]
combo = read.csv("/users/j29tien/colocalization_ML/real_matrix.tsv", sep='\t')
metadata = na.omit(read.csv("/users/mgloud/projects/coloc_comparisons/jeremy/colocalization_matrix_real_data.tsv", sep='\t'))[c(1:5)]
metadata
combo$test_names = paste(metadata$ref_snp, metadata$eqtl_file, metadata$gwas_trait, metadata$base_gwas_file, metadata$feature, sep="_")
combo$test_names
combo
stopifnot(length(combo$test_names) == length(unique(combo$test_names))) # Each test should have a unique ID
upset_matrix = array(-1, dim=c(dim(combo)[1],9))
upset_matrix
dimnames(upset_matrix)[[1]] = combo$test_names
upset_matrix
ensemble = read.csv("/users/j29tien/colocalization_ML/coloc_comparison/scripts/ensemble_training/realdata_scores.tsv", sep='\t')
# Load all colocalization results for different methods
combo = read.csv("/users/j29tien/colocalization_ML/real_matrix.tsv", sep='\t')
metadata = na.omit(read.csv("/users/mgloud/projects/coloc_comparisons/jeremy/colocalization_matrix_real_data.tsv", sep='\t'))[c(1:5)]
ensemble = read.csv("/users/j29tien/colocalization_ML/coloc_comparison/scripts/ensemble_training/realdata_scores.tsv", sep='\t')
###########################################
# UpSet plot for all
###########################################
# Make an array to show the different sets that we can have...
# Note: Right now this plot's pretty sloppy because we're not sure
# that the combo was actually tested in all methods...for some, it may
# have been dropped due to bugs in our pipeline rather than deficiencies
# of the method itself
combo = rbind(ensemble, combo)
# Load all colocalization results for different methods
combo = read.csv("/users/j29tien/colocalization_ML/real_matrix.tsv", sep='\t')
metadata = na.omit(read.csv("/users/mgloud/projects/coloc_comparisons/jeremy/colocalization_matrix_real_data.tsv", sep='\t'))[c(1:5)]
ensemble = read.csv("/users/j29tien/colocalization_ML/coloc_comparison/scripts/ensemble_training/realdata_scores.tsv", sep='\t')
###########################################
# UpSet plot for all
###########################################
# Make an array to show the different sets that we can have...
# Note: Right now this plot's pretty sloppy because we're not sure
# that the combo was actually tested in all methods...for some, it may
# have been dropped due to bugs in our pipeline rather than deficiencies
# of the method itself
combo = cbind(ensemble, combo)
combo
colnames(combo)
combo$ENSEMBLE
combo$COLOC
combo$ENSEMBLE
combo$COLOC
combo$RTC
combo$test_names = paste(metadata$ref_snp, metadata$eqtl_file, metadata$gwas_trait, metadata$base_gwas_file, metadata$feature, sep="_")
stopifnot(length(combo$test_names) == length(unique(combo$test_names))) # Each test should have a unique ID
upset_matrix = array(-1, dim=c(dim(combo)[1],9))
dimnames(upset_matrix)[[1]] = combo$test_names
dimnames(upset_matrix)[[2]] = c('COLOC', 'RTC', 'FINEMAP_STANDARD', 'FINEMAP_MODIFIED', 'BASELINE', 'SMARTBASELINE', 'SMR', 'GSMR', 'TWAS')
combo$ranked_COLOC = rank(-combo$COLOC)
combo$ranked_RTC = rank(-combo$RTC)
combo$ranked_FINEMAP_STANDARD = rank(-combo$FINEMAP_STANDARD)
combo$ranked_FINEMAP_MODIFIED = rank(-combo$FINEMAP_MODIFIED)
combo$ranked_BASELINE = rank(-combo$BASELINE)
combo$ranked_SMARTBASELINE = rank(-combo$SMARTBASELINE)
combo$ranked_SMR = rank(-combo$SMR)
combo$ranked_GSMR = rank(-combo$GSMR)
combo$ranked_TWAS = rank(-combo$TWAS)
require(readr)
require(dplyr)
require(UpSetR)
# Load all colocalization results for different methods
combo = read.csv("/users/j29tien/colocalization_ML/real_matrix.tsv", sep='\t')
metadata = na.omit(read.csv("/users/mgloud/projects/coloc_comparisons/jeremy/colocalization_matrix_real_data.tsv", sep='\t'))[c(1:5)]
ensemble = read.csv("/users/j29tien/colocalization_ML/coloc_comparison/scripts/ensemble_training/realdata_scores.tsv", sep='\t')
###########################################
# UpSet plot for all
###########################################
# Make an array to show the different sets that we can have...
# Note: Right now this plot's pretty sloppy because we're not sure
# that the combo was actually tested in all methods...for some, it may
# have been dropped due to bugs in our pipeline rather than deficiencies
# of the method itself
combo = cbind(ensemble, combo)
combo$test_names = paste(metadata$ref_snp, metadata$eqtl_file, metadata$gwas_trait, metadata$base_gwas_file, metadata$feature, sep="_")
stopifnot(length(combo$test_names) == length(unique(combo$test_names))) # Each test should have a unique ID
upset_matrix = array(-1, dim=c(dim(combo)[1],9))
dimnames(upset_matrix)[[1]] = combo$test_names
dimnames(upset_matrix)[[2]] = c('ENSEMBLE', 'COLOC', 'RTC', 'FINEMAP_STANDARD', 'FINEMAP_MODIFIED', 'BASELINE', 'SMARTBASELINE', 'SMR', 'GSMR', 'TWAS')
# Load all colocalization results for different methods
combo = read.csv("/users/j29tien/colocalization_ML/real_matrix.tsv", sep='\t')
metadata = na.omit(read.csv("/users/mgloud/projects/coloc_comparisons/jeremy/colocalization_matrix_real_data.tsv", sep='\t'))[c(1:5)]
ensemble = read.csv("/users/j29tien/colocalization_ML/coloc_comparison/scripts/ensemble_training/realdata_scores.tsv", sep='\t')
###########################################
# UpSet plot for all
###########################################
# Make an array to show the different sets that we can have...
# Note: Right now this plot's pretty sloppy because we're not sure
# that the combo was actually tested in all methods...for some, it may
# have been dropped due to bugs in our pipeline rather than deficiencies
# of the method itself
combo = cbind(ensemble, combo)
combo$test_names = paste(metadata$ref_snp, metadata$eqtl_file, metadata$gwas_trait, metadata$base_gwas_file, metadata$feature, sep="_")
stopifnot(length(combo$test_names) == length(unique(combo$test_names))) # Each test should have a unique ID
upset_matrix = array(-1, dim=c(dim(combo)[1],10))
dimnames(upset_matrix)[[1]] = combo$test_names
dimnames(upset_matrix)[[2]] = c('ENSEMBLE', 'COLOC', 'RTC', 'FINEMAP_STANDARD', 'FINEMAP_MODIFIED', 'BASELINE', 'SMARTBASELINE', 'SMR', 'GSMR', 'TWAS')
combo$ranked_ENSEMBLE = rank(-combo$ENSEMBLE)
combo$ranked_COLOC = rank(-combo$COLOC)
combo$ranked_RTC = rank(-combo$RTC)
combo$ranked_FINEMAP_STANDARD = rank(-combo$FINEMAP_STANDARD)
combo$ranked_FINEMAP_MODIFIED = rank(-combo$FINEMAP_MODIFIED)
combo$ranked_BASELINE = rank(-combo$BASELINE)
combo$ranked_SMARTBASELINE = rank(-combo$SMARTBASELINE)
combo$ranked_SMR = rank(-combo$SMR)
combo$ranked_GSMR = rank(-combo$GSMR)
combo$ranked_TWAS = rank(-combo$TWAS)
combo
combo$ranked_COLOC
rank_threshold = 1000
for (i in 1:dim(upset_matrix)[1])
{
        upset_matrix[i, 1] = (combo[i,]$ranked_ENSEMBLE<= rank_threshold)
        upset_matrix[i, 2] = (combo[i,]$ranked_COLOC<= rank_threshold)
        upset_matrix[i, 3] = (combo[i,]$ranked_RTC<= rank_threshold)
        upset_matrix[i, 4] = (combo[i,]$ranked_FINEMAP_STANDARD<= rank_threshold)
        upset_matrix[i, 5] = (combo[i,]$ranked_FINEMAP_MODIFIED<= rank_threshold)
        upset_matrix[i, 6] = (combo[i,]$ranked_BASELINE<= rank_threshold)
        upset_matrix[i, 7] = (combo[i,]$ranked_SMARTBASELINE<= rank_threshold)
        upset_matrix[i, 8] = (combo[i,]$ranked_SMR<= rank_threshold)
        upset_matrix[i, 9] = (combo[i,]$ranked_GSMR<= rank_threshold)
        upset_matrix[i, 10] = (combo[i,]$ranked_TWAS<= rank_threshold)
}
upset_matrix
colnames(upset_matrix)
rownames(upset_matrix)
upset_matrix[is.na(upset_matrix)] = 0
upset_matrix = upset_matrix[rowSums(upset_matrix) > 0,]
upset_matrix = data.frame(upset_matrix)
#upset_matrix$Names = rownames(upset_matrix)
upset_matrix_names = rownames(upset_matrix)
upset(upset_matrix, 
      sets = dimnames(upset_matrix)[[2]], 
      order.by="freq", matrix.color="blue", point.size=5,
      sets.bar.color=c("chartreuse", "maroon","blue","orange", "green", "red", "violet", "cyan", "forestgreen", "black"))
q()
require(readr)
require(dplyr)
require(UpSetR)
a <- c(1,5,2,10)
rank(a)
rank(-a)
# Load all colocalization results for different methods
combo = read.csv("/users/j29tien/colocalization_ML/real_matrix.tsv", sep='\t')
metadata = na.omit(read.csv("/users/mgloud/projects/coloc_comparisons/jeremy/colocalization_matrix_real_data.tsv", sep='\t'))[c(1:5)]
ensemble = read.csv("/users/j29tien/colocalization_ML/coloc_comparison/scripts/ensemble_training/realdata_scores.tsv", sep='\t')
###########################################
# UpSet plot for all
###########################################
# Make an array to show the different sets that we can have...
# Note: Right now this plot's pretty sloppy because we're not sure
# that the combo was actually tested in all methods...for some, it may
# have been dropped due to bugs in our pipeline rather than deficiencies
# of the method itself
combo = cbind(ensemble, combo)
combo$test_names = paste(metadata$ref_snp, metadata$eqtl_file, metadata$gwas_trait, metadata$base_gwas_file, metadata$feature, sep="_")
stopifnot(length(combo$test_names) == length(unique(combo$test_names))) # Each test should have a unique ID
upset_matrix = array(-1, dim=c(dim(combo)[1],10))
dimnames(upset_matrix)[[1]] = combo$test_names
dimnames(upset_matrix)[[2]] = c('ENSEMBLE', 'COLOC', 'RTC', 'FINEMAP_STANDARD', 'FINEMAP_MODIFIED', 'BASELINE', 'SMARTBASELINE', 'SMR', 'GSMR', 'TWAS')
# rank scores from each method, greatest to least (hence the '-' sign)
combo$ranked_ENSEMBLE = rank(-combo$ENSEMBLE)
combo$ranked_COLOC = rank(-combo$COLOC)
combo$ranked_RTC = rank(-combo$RTC)
combo$ranked_FINEMAP_STANDARD = rank(-combo$FINEMAP_STANDARD)
combo$ranked_FINEMAP_MODIFIED = rank(-combo$FINEMAP_MODIFIED)
combo$ranked_BASELINE = rank(-combo$BASELINE)
combo$ranked_SMARTBASELINE = rank(-combo$SMARTBASELINE)
combo$ranked_SMR = rank(-combo$SMR)
combo$ranked_GSMR = rank(-combo$GSMR)
combo$ranked_TWAS = rank(-combo$TWAS)
combo
combo$ranked_ENSEMBLE
q()
